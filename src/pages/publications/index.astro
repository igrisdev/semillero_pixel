---
import Container from '@share_components/Container.astro'
import CartPublication from '@components/home/CartPublication.astro'
import Layout from '@layouts/Layout.astro'
import Split from '@share_components/Split.astro'

import Row from '@assets/icons/row.svg'
import Grid from '@assets/icons/grid.svg'

import { getHomePublicationCard } from '@lib/api/get-home-publications-card'
import { parsePublications } from '@lib/parsePublications'

let newPublications: any[] = []
let types: string[] = []
let fetchError = false
const isYear = new Date().getFullYear()

try {
  const publications: any[] = await getHomePublicationCard()
  newPublications = parsePublications(publications)

  const filterPublications: Set<string> = new Set()

  newPublications.forEach(({ publications }) => {
    publications.forEach((publication: any) => {
      const { types } = publication
      types.forEach((type: any) => {
        filterPublications.add(type.title)
      })
    })
  })

  types = Array.from(filterPublications)
} catch (error) {
  console.error('Error al obtener publicaciones:', error)
  fetchError = true
}
---

<Layout title='Artículos'>
  <Split />
  <Container styles='py-10 grid gap-10'>
    <h2
      class='text-theme-title mb-2 text-center text-2xl font-bold uppercase sm:text-4xl'
    >
      Publicaciones
    </h2>

    {
      fetchError ? (
        <div class='text-center text-red-600'>
          <p class='text-lg font-medium'>
            No se pudieron cargar las publicaciones. Intenta más tarde.
          </p>
        </div>
      ) : (
        <div class='grid gap-10'>
          <section class='flex flex-wrap items-center justify-between gap-4'>
            <div class='text-theme-text flex flex-wrap gap-2'>
              <button class='bg-theme-decoration/10 border-theme-decoration cursor-pointer border-1 px-4 py-1 text-sm'>
                Todos
              </button>

              {types.map((type: any) => (
                <button class='border-theme-decoration cursor-pointer border-1 px-4 py-1 text-sm'>
                  {type}
                </button>
              ))}
            </div>

            <div>
              <button
                id='btn-toggle-view-publications'
                class='text-theme-text grid size-7 cursor-pointer place-content-center'
                data-state='time-line'
              >
                <Grid class='to-years h-full w-full' />
                <Row class='time-line h-full w-full' />
              </button>
            </div>
          </section>

          <section class='to-years grid grid-cols-1 gap-5 md:grid-cols-2'>
            {newPublications.map(({ publications }) =>
              publications.map((publication: any) => (
                <CartPublication {...publication} />
              ))
            )}
          </section>

          <section class='time-line border-theme-split grid gap-4 border-l-2 pl-4'>
            {newPublications.map(({ year, publications }) => (
              <div class='flex flex-col gap-2'>
                <header class='relative'>
                  <span class='text-theme-title text-sm'>
                    {isYear.toString() === year ? 'Ahora' : year}
                  </span>
                  <div class='bg-theme-decoration absolute top-[7px] -left-[23px] size-3 rounded-full' />
                </header>

                <section class='grid grid-cols-1 gap-5 md:grid-cols-2'>
                  {publications.map((publication: any) => (
                    <CartPublication {...publication} />
                  ))}
                </section>
              </div>
            ))}
          </section>
        </div>
      )
    }
  </Container>
</Layout>

<script is:inline>
  const btnToggleViewArticles = document.querySelector(
    '#btn-toggle-view-publications'
  )

  const toYears = document.querySelectorAll('.to-years')
  const timeLine = document.querySelectorAll('.time-line')

  if (btnToggleViewArticles.dataset.state === 'to-years') {
    handleTimeLine()
  } else {
    handleToYear()
  }

  btnToggleViewArticles.addEventListener('click', e => {
    const type = e.currentTarget.dataset.state

    if (type === 'to-years') {
      handleToYear()
    } else {
      handleTimeLine()
    }

    const newType = type === 'to-years' ? 'time-line' : 'to-years'
    btnToggleViewArticles.setAttribute('data-state', newType)
  })

  function handleToYear() {
    toYears.forEach(el => el.classList.remove('hidden'))
    timeLine.forEach(el => el.classList.add('hidden'))
  }

  function handleTimeLine() {
    toYears.forEach(el => el.classList.add('hidden'))
    timeLine.forEach(el => el.classList.remove('hidden'))
  }
</script>
