---
const { pathname } = Astro.url

import Facebook from '@assets/icons/facebook.svg'
import X from '@assets/icons/x.svg'
import Instagram from '@assets/icons/instagram.svg'
import Github from '@assets/icons/github.svg'

import Sun from '@assets/icons/sun.svg'
import Moon from '@assets/icons/moon.svg'

import Menu from '@assets/icons/menu.svg'
import Close from '@assets/icons/close.svg'

import Logo_pixel from '@assets/icons/logo_pixel.svg'

import Container from '@share_components/Container.astro'
import Split from '@share_components/Split.astro'

export const SOCIALS_MEDIA = [
  {
    name: 'Facebook',
    icon: Facebook,
    link: '#',
  },
  {
    name: 'Instagram',
    icon: Instagram,
    link: '#',
  },
  {
    name: 'X',
    icon: X,
    link: '#',
  },
  {
    name: 'Github',
    icon: Github,
    link: '#',
  },
]

const LINKS = [
  {
    name: 'Inicio',
    link: '/',
  },
  // {
  //   name: 'Proyectos',
  //   link: '#',
  // },
  {
    name: 'Art√≠culos',
    link: '/articles',
  },
  // {
  //   name: 'Publicaciones',
  //   link: '#',
  // },
  // {
  //   name: 'Eventos',
  //   link: '#',
  // },
  {
    name: 'Sobre Nosotros',
    link: '/about-us',
  },
]
---

<header class='h-[45vh] overflow-hidden w-full flex flex-col relative'>
  <Container
    styles='min-h-20 max-h-20 flex items-center justify-between relative'
  >
    <div class='flex gap-5'>
      {
        SOCIALS_MEDIA.map(({ link, icon: Icon }) => (
          <a href={link} class='flex items-center gap-2'>
            <Icon class='' />
          </a>
        ))
      }
    </div>

    <nav class=''>
      <ul class='gap-5 text-sm items-center font-medium hidden md:flex'>
        {
          LINKS.map(({ name, link }) => (
            <li>
              <a
                href={link}
                class={
                  link === pathname
                    ? 'text-theme-decoration'
                    : 'text-theme-text'
                }
              >
                {name}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>

    <div class='flex gap-6 text-theme-text'>
      <button class='touch-change-theme cursor-pointer'>
        <Sun width={24} height={24} class='is-light' />
        <Moon width={24} height={24} class='is-dark' />
      </button>

      <button class='block md:hidden touch-open cursor-pointer'>
        <Menu width={24} height={24} />
      </button>
    </div>
  </Container>

  <Split />

  <section class='grid place-content-center h-full'>
    <div
      class='flex gap-4 sm:gap-6 md:gap-10 items-center h-full text-theme-title'
    >
      <Logo_pixel
        class='size-[40px] sm:size-[60px] md:size-[80px] lg:size-[100px]'
      />

      <a href='/'>
        <h1
          class='uppercase font-micro5 text-5xl sm:text-7xl md:text-8xl lg:text-9xl'
        >
          Semillero <span class='text-theme-decoration'>Pixel</span>
        </h1>
      </a>
    </div>
  </section>
</header>

<!-- Menu para mobile -->
<header
  id='is-view'
  class='h-screen overflow-hidden w-full flex flex-col fixed top-0 z-50 md:hidden hidden bg-theme-decoration'
>
  <Container
    styles='min-h-20 max-h-20 flex items-center justify-between relative bg-theme-background'
  >
    <div class='flex gap-5'>
      {
        SOCIALS_MEDIA.map(({ link, icon: Icon }) => (
          <a href={link} class='flex items-center gap-2'>
            <Icon class='' />
          </a>
        ))
      }
    </div>

    <nav
      class='absolute left-0 top-20 right-0 h-[92vh] grid place-content-center'
    >
      <ul class='gap-6 text-xl items-center font-medium flex flex-col'>
        {
          LINKS.map(({ name, link }) => (
            <li>
              <a
                href={link}
                class={
                  pathname === link
                    ? 'text-theme-title-secondary'
                    : 'text-theme-title'
                }
              >
                {name}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>

    <div class='flex gap-6 text-theme-text'>
      <button class='touch-change-theme cursor-pointer'>
        <Sun width={24} height={24} class='is-light' />
        <Moon width={24} height={24} class='is-dark' />
      </button>

      <button class='touch-close cursor-pointer'>
        <Close class='' width={24} height={24} />
      </button>
    </div>
  </Container>
</header>

<!-- Abrir o cerrar el menu -->
<script is:inline>
  const $ = el => document.querySelector(el)
  const $$ = el => document.querySelectorAll(el)

  const touchOpen = $('.touch-open')
  const touchClose = $$('.touch-close')
  const isView = $('#is-view')

  function handleIsView() {
    isView.classList.remove('hidden')
  }

  function handleNotView() {
    isView.classList.add('hidden')
  }

  function handleTouchOpen() {
    touchOpen.addEventListener('click', handleIsView)
  }

  function handleTouchClose() {
    touchClose.forEach(el => el.addEventListener('click', handleNotView))
  }

  isView.addEventListener('click', e => {
    const nameElement = e.target.nodeName

    if (nameElement !== 'LI') {
      handleNotView()
    }
  })

  handleTouchClose()
  handleTouchOpen()
</script>

<!-- cambiar color de tema -->
<script is:inline>
  const html = $('html')

  const isDark = $$('.is-dark')
  const isLight = $$('.is-light')

  const touchChangeTheme = $$('.touch-change-theme')

  const localStorageTheme = localStorage.getItem('theme')

  handleChangeThemeIcon(localStorageTheme)

  function setLocalStorageTheme(theme) {
    localStorage.setItem('theme', theme)
  }

  if (localStorageTheme === 'dark') {
    handleChangeTheme()
  }

  function handleChangeTheme(e) {
    if (e) {
      e.stopPropagation()
    }
    html.classList.toggle('dark')

    const theme = html.classList.contains('dark') ? 'dark' : 'light'

    handleChangeThemeIcon(theme)

    setLocalStorageTheme(theme)
  }

  function handleChangeThemeIcon(theme) {
    if (theme === 'dark') {
      isDark.forEach(el => el.classList.remove('hidden'))
      isLight.forEach(el => el.classList.add('hidden'))
    } else {
      isDark.forEach(el => el.classList.add('hidden'))
      isLight.forEach(el => el.classList.remove('hidden'))
    }
  }

  touchChangeTheme.forEach(el =>
    el.addEventListener('click', handleChangeTheme)
  )
</script>
